/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.adminbg.merger.ui;

import static net.adminbg.merger.ui.Configuration.BTN_EXIT;
import static net.adminbg.merger.ui.Configuration.BTN_MERGE;
import static net.adminbg.merger.ui.Configuration.BTN_OPEN;
import static net.adminbg.merger.ui.Configuration.CANCEL_FILE_SELECTION;
import static net.adminbg.merger.ui.Configuration.DATE_FORMAT;
import static net.adminbg.merger.ui.Configuration.DIALOG_CAPTION;
import static net.adminbg.merger.ui.Configuration.ERROR_CAPTION;
import static net.adminbg.merger.ui.Configuration.FILE_PATTERN;
import static net.adminbg.merger.ui.Configuration.FINAL_MESSAGE;
import static net.adminbg.merger.ui.Configuration.FINISHED;
import static net.adminbg.merger.ui.Configuration.FONT_NAME;
import static net.adminbg.merger.ui.Configuration.MEGRE_END;
import static net.adminbg.merger.ui.Configuration.MESSAGE_FAIL;
import static net.adminbg.merger.ui.Configuration.NEW_LINE;
import static net.adminbg.merger.ui.Configuration.PROGRESS_DONE;
import static net.adminbg.merger.ui.Configuration.READING_FILE;
import static net.adminbg.merger.ui.Configuration.SHOP_BTN_NAME;
import static net.adminbg.merger.ui.Configuration.SHOP_EXT;
import static net.adminbg.merger.ui.Configuration.SHOP_TASK_CLASS;
import static net.adminbg.merger.ui.Configuration.STORE_BTN_NAME;
import static net.adminbg.merger.ui.Configuration.STORE_EXT;
import static net.adminbg.merger.ui.Configuration.STORE_TASK_CLASS;
import static net.adminbg.merger.ui.Configuration.TEXTAREA_LOG_MESSAGE_SHOP;
import static net.adminbg.merger.ui.Configuration.TEXTAREA_LOG_MESSAGE_STORE;
import static net.adminbg.merger.ui.Configuration.TIME_ELAPSED;
import static net.adminbg.merger.ui.Configuration.UI_STYLE;

import java.awt.Cursor;
import java.awt.HeadlessException;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

import net.adminbg.merger.io.FileTask;
import net.adminbg.merger.io.MergeException;
import net.adminbg.merger.io.TaskDispatcher;
import net.adminbg.merger.logging.ApplicationLogger;

/**
 * 
 * This class represents the user interface.
 * 
 * @author kakavidon
 */
public class MainWindow extends javax.swing.JPanel implements TaskListener {

	/**
	 *
	 */
	private static final long serialVersionUID = 464314710332456958L;
	private JFrame frame;
	private final Map<String, String> directories = new TreeMap<>();
	private final Map<String, SelectionInfo> selection = new TreeMap<>();
	private final TaskComponent taskComponent;
	private static final Logger LOGGER = ApplicationLogger.INSTANCE.getLogger(MainWindow.class);

	/**
	 * Creates new form MainWindow
	 */
	public MainWindow() {
		taskComponent = new TaskComponent();
		taskComponent.addTaskListener(this);

		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		outputArea = new javax.swing.JTextArea();
		exitButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();
		progressBar = new javax.swing.JProgressBar();
		storeButton = new javax.swing.JButton();
		shopButton = new javax.swing.JButton();
		storeText = new javax.swing.JTextField();
		shopText = new javax.swing.JTextField();
		storeLabel = new javax.swing.JLabel();
		storeLabel1 = new javax.swing.JLabel();

		setPreferredSize(new java.awt.Dimension(500, 400));

		outputArea.setColumns(20);
		outputArea.setRows(5);
		outputArea.setFocusable(false);
		outputArea.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		outputArea.setRequestFocusEnabled(false);
		jScrollPane1.setViewportView(outputArea);

		// // NOI18N
		exitButton.setText(BTN_EXIT); // NOI18N
		exitButton.setMaximumSize(new java.awt.Dimension(50, 28));
		exitButton.setMinimumSize(new java.awt.Dimension(50, 28));
		exitButton.setPreferredSize(new java.awt.Dimension(50, 28));
		exitButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitButtonActionPerformed(evt);
			}
		});

		mergeButton.setText(BTN_MERGE); // NOI18N
		mergeButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mergeButtonActionPerformed(evt);
			}
		});
		storeButton.setName(STORE_BTN_NAME);
		storeButton.setText(BTN_OPEN); // NOI18N
		storeButton.setMaximumSize(new java.awt.Dimension(28, 28));
		storeButton.setMinimumSize(new java.awt.Dimension(28, 28));
		storeButton.setPreferredSize(new java.awt.Dimension(28, 28));
		storeButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				storeButtonActionPerformed(evt);
			}
		});
		shopButton.setName(SHOP_BTN_NAME); // $NON-NLS-1$
		shopButton.setText(Configuration.BTN_OPEN); // NOI18N
		shopButton.setMaximumSize(new java.awt.Dimension(28, 28));
		shopButton.setMinimumSize(new java.awt.Dimension(28, 28));
		shopButton.setPreferredSize(new java.awt.Dimension(28, 28));
		shopButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopButtonActionPerformed(evt);
			}
		});

		storeText.setText(""); //$NON-NLS-1$
		storeText.setFocusable(false);
		storeText.setRequestFocusEnabled(false);

		shopText.setText(""); //$NON-NLS-1$
		shopText.setFocusable(false);
		shopText.setRequestFocusEnabled(false);

		storeLabel.setFont(new java.awt.Font(FONT_NAME, 1, 15)); // NOI18N
																	// //$NON-NLS-1$
		storeLabel.setText(Configuration.LBL_STORE); // NOI18N

		storeLabel1.setFont(new java.awt.Font(FONT_NAME, 1, 15)); // NOI18N
																	// //$NON-NLS-1$
		storeLabel1.setText(Configuration.LBL_SHOP); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1)
								.addGroup(layout.createSequentialGroup()
										.addComponent(mergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 327,
												Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(storeLabel).addComponent(storeLabel1))
								.addGap(0, 0, Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(storeText).addComponent(shopText))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(shopButton, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(storeButton, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addComponent(storeLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(storeText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(storeButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(storeLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(shopText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(shopButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
						.addGap(4, 4, 4)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(mergeButton).addComponent(progressBar,
										javax.swing.GroupLayout.Alignment.TRAILING,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitButtonActionPerformed
		frame.dispose();
		System.exit(0);
	}// GEN-LAST:event_exitButtonActionPerformed

	private void storeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_storeButtonActionPerformed
		final JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory(new File("C:\\Users\\Lachezar.Nedelchev\\git\\adminmerge\\store")); //$NON-NLS-1$
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fileChooser.showOpenDialog(this);
		final String previousDir = storeText.getText();
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			final String fileName = file.getAbsolutePath();
			storeText.setText(fileName);
			storeText.setEnabled(false);
			final SelectionInfo selectionInfo = new SelectionInfo(Paths.get(fileName), STORE_EXT, STORE_TASK_CLASS);
			final String sender = ((JButton) evt.getSource()).getName();
			selection.remove(sender);
			selection.put(sender, selectionInfo);
			if (previousDir != null) {
				directories.remove(previousDir);
			}
			directories.put(fileName, ".csv"); //$NON-NLS-1$
			outputArea.append(TEXTAREA_LOG_MESSAGE_STORE + fileName + NEW_LINE); // $NON-NLS-1$
			// //$NON-NLS-2$

		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_storeButtonActionPerformed

	private void shopButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_shopButtonActionPerformed

		final JFileChooser fileChooser = new JFileChooser();
		// fileChooser.setCurrentDirectory(new File(".\\shop"));
		fileChooser.setSelectedFile(new File("C:\\Users\\Lachezar.Nedelchev\\git\\adminmerge\\shop")); //$NON-NLS-1$
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fileChooser.showOpenDialog(this);
		final String previousDir = shopText.getText();
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			final String fileName = file.getAbsolutePath();
			shopText.setText(fileName);
			final SelectionInfo selectionInfo = new SelectionInfo(Paths.get(fileName), SHOP_EXT, SHOP_TASK_CLASS);
			final String sender = ((JButton) evt.getSource()).getName();
			selection.remove(sender);
			selection.put(sender, selectionInfo);

			if (previousDir != null) {
				directories.remove(previousDir);
			}
			directories.put(fileName, ".xlsx"); //$NON-NLS-1$
			shopText.setEnabled(false);
			outputArea.append(TEXTAREA_LOG_MESSAGE_SHOP + fileName + NEW_LINE); // $NON-NLS-1$
			// //$NON-NLS-2$

		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_shopButtonActionPerformed

	private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mergeButtonActionPerformed

		final JFileChooser fileChooser = new JFileChooser();
		final File defaultFileName = getDefaultFileName();
		fileChooser.setSelectedFile(defaultFileName);
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int returnVal = fileChooser.showSaveDialog(this);
		progressBar.setStringPainted(true);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			try {
				outputArea.setText(""); //$NON-NLS-1$
				merge(fileChooser.getSelectedFile().toPath());
				shopText.setText(""); //$NON-NLS-1$
				storeText.setText(""); //$NON-NLS-1$
				shopText.setEnabled(true);
				storeText.setEnabled(true);
			} catch (MergeException e) {
				LOGGER.log(Level.SEVERE, e.getMessage(), e.getCause());
				shopText.setText(""); //$NON-NLS-1$
				storeText.setText(""); //$NON-NLS-1$
				shopText.setEnabled(true);
				storeText.setEnabled(true);
				showError(e);
				selection.clear();

			}
		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_mergeButtonActionPerformed

	protected static File getDefaultFileName() {
		final Date time = Calendar.getInstance().getTime();
		final String dateStr = new SimpleDateFormat(DATE_FORMAT).format(time);
		return new File(String.format(FILE_PATTERN, dateStr));
	}

	public void start() {
		try {
			LOGGER.setLevel(Level.SEVERE);
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if (UI_STYLE.equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}

		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			LOGGER.log(Level.SEVERE, null, ex);
		}

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				final MainWindow m = new MainWindow();
				final JFrame frame = new JFrame();
				m.setFrame(frame);
				frame.add(m);
				frame.pack();
				frame.setLocationRelativeTo(null);
				frame.setVisible(true);
			}
		});
	}

	public void setFrame(final JFrame frame) {
		this.frame = frame;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton exitButton;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton mergeButton;
	private javax.swing.JTextArea outputArea;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JButton shopButton;
	private javax.swing.JTextField shopText;
	private javax.swing.JButton storeButton;
	private javax.swing.JLabel storeLabel;
	private javax.swing.JLabel storeLabel1;
	private javax.swing.JTextField storeText;

	// End of variables declaration//GEN-END:variables

	public void updateProgress(int percentDone) {
		mergeButton.setEnabled(false);
		progressBar.setValue(progressBar.getValue() + percentDone);
	}

	public void printTask(FileTask<?, ?> fileTask) {
		final String message = READING_FILE + fileTask.getFile().toString() + FINISHED;
		outputArea.append(message + NEW_LINE);
	}

	private void merge(final Path targetFile) throws MergeException {
		final long start = System.nanoTime();

		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() /*
																		 * implements
																		 * TaskListener
																		 */ {
			private Throwable exception = null;

			@Override
			protected Void doInBackground() throws Exception {
				mergeButton.setEnabled(false);
				mergeButton.repaint();
				progressBar.setValue(0);
				progressBar.repaint();
				frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
				outputArea.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
				frame.repaint();
				int progress = 0;
				final TaskDispatcher dipatcher = TaskDispatcher.INSTANCE;
				final Collection<SelectionInfo> values = selection.values();
				final TreeSet<SelectionInfo> copy = new TreeSet<SelectionInfo>(values);
				dipatcher.setSelection(copy);
				dipatcher.setTargetFile(targetFile);

				try {
					dipatcher.parseDirectories();
					List<Future<FileTask<?, ?>>> results = dipatcher.execute(taskComponent);

					setProgress(0);

					List<FileTask<?, ?>> finishedTasks = new ArrayList<>();
					for (Future<FileTask<?, ?>> task : results) {
						try {
							final FileTask<?, ?> fileTask = task.get();
							finishedTasks.add(fileTask);
							progress += fileTask.getPercentDone();
						} catch (InterruptedException | ExecutionException ex) {
							LOGGER.log(Level.SEVERE, ERROR_CAPTION, ex);
							exception = ex;
							showError(ex);
							selection.clear();
							return null;
						}
					}
					if (progress < 100) {
						LOGGER.log(Level.INFO, PROGRESS_DONE, progress);
					}
					dipatcher.mergeFiles(finishedTasks);
					LOGGER.info(MEGRE_END);

				} catch (IllegalArgumentException | UnsupportedOperationException | MergeException e) {
					LOGGER.log(Level.SEVERE, e.getMessage(), e);
					showError(e);
					exception = e;
					selection.clear();
					return null;
				}

				return null;
			}

			@Override
			public void done() {
				if (exception == null) {
					mergeButton.setEnabled(true);
					progressBar.setValue(100);
					outputArea.append(FINAL_MESSAGE);

				}
				selection.clear();
				frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				outputArea.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				mergeButton.setEnabled(true);
			}

		};

		worker.execute();

		final long end = System.nanoTime();
		LOGGER.log(Level.INFO, TIME_ELAPSED, (end - start) / 1000);

	}

	protected void showError(Throwable e) throws HeadlessException {
		String msg = e.getMessage().replaceAll(":", "\n");
		JOptionPane.showMessageDialog(frame, msg, DIALOG_CAPTION, JOptionPane.ERROR_MESSAGE);
		mergeButton.setEnabled(true);
		progressBar.setValue(0);
		outputArea.append(MESSAGE_FAIL);
	}

	@Override
	public void percentDone(final TaskEvent taskEvent) {
		final int progress = taskEvent.getProgress();
		final int newValue = Math.min(progressBar.getValue() + progress, 100);
		outputArea.append(taskEvent.getMessage() + NEW_LINE);
		progressBar.setValue(newValue);
		progressBar.repaint();

	}

}
