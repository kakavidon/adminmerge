/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.adminbg.merger.ui;

import static net.adminbg.merger.ui.Configuration.CANCEL_FILE_SELECTION;
import static net.adminbg.merger.ui.Configuration.NEW_LINE;
import static net.adminbg.merger.ui.Configuration.TEXTAREA_LOG_MESSAGE_SHOP;
import static net.adminbg.merger.ui.Configuration.TEXTAREA_LOG_MESSAGE_STORE;
import static net.adminbg.merger.ui.Configuration.UI_STYLE;

import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingWorker;

import net.adminbg.merger.io.FileTask;
import net.adminbg.merger.io.TaskDispatcher;

/**
 *
 * @author kakavidon
 */
public class MainWindow extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 464314710332456958L;
	private JFrame frame;
	TaskDispatcher taskDispatcher;
	private static final Logger LOGGER = Logger.getLogger(MainWindow.class.getName());

	/**
	 * Creates new form MainWindow
	 */
	public MainWindow() {
		// taskDispatcher = new TaskDispatcher();
		// taskDispatcher.addPropertyChangeListener(this);

		initComponents();
	}

	private final Map<String, String> directories = new TreeMap<>();

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		outputArea = new javax.swing.JTextArea();
		exitButton = new javax.swing.JButton();
		mergeButton = new javax.swing.JButton();
		progressBar = new javax.swing.JProgressBar();
		storeButton = new javax.swing.JButton();
		shopButton = new javax.swing.JButton();
		storeText = new javax.swing.JTextField();
		shopText = new javax.swing.JTextField();
		storeLabel = new javax.swing.JLabel();
		storeLabel1 = new javax.swing.JLabel();

		setPreferredSize(new java.awt.Dimension(500, 400));

		outputArea.setColumns(20);
		outputArea.setRows(5);
		outputArea.setFocusable(false);
		outputArea.setOpaque(false);
		outputArea.setRequestFocusEnabled(false);
		jScrollPane1.setViewportView(outputArea);

		// java.util.ResourceBundle bundle =
		// java.util.ResourceBundle.getBundle("net/adminbg/merger/io/message");
		// // NOI18N
		exitButton.setText(Configuration.BTN_EXIT); // NOI18N
		exitButton.setMaximumSize(new java.awt.Dimension(50, 28));
		exitButton.setMinimumSize(new java.awt.Dimension(50, 28));
		exitButton.setPreferredSize(new java.awt.Dimension(50, 28));
		exitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitButtonActionPerformed(evt);
			}
		});

		mergeButton.setText(Configuration.BTN_MERGE); // NOI18N
		mergeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				mergeButtonActionPerformed(evt);
			}
		});

		storeButton.setText(Configuration.BTN_OPEN); // NOI18N
		storeButton.setMaximumSize(new java.awt.Dimension(28, 28));
		storeButton.setMinimumSize(new java.awt.Dimension(28, 28));
		storeButton.setPreferredSize(new java.awt.Dimension(28, 28));
		storeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				storeButtonActionPerformed(evt);
			}
		});

		shopButton.setText(Configuration.BTN_OPEN); // NOI18N
		shopButton.setMaximumSize(new java.awt.Dimension(28, 28));
		shopButton.setMinimumSize(new java.awt.Dimension(28, 28));
		shopButton.setPreferredSize(new java.awt.Dimension(28, 28));
		shopButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopButtonActionPerformed(evt);
			}
		});

		storeText.setText("C:\\Users\\Lachezar.Nedelchev\\git\\adminmerge\\");
		storeText.setFocusable(false);
		storeText.setRequestFocusEnabled(false);

		shopText.setText("C:\\Users\\Lachezar.Nedelchev\\git\\adminmerge\\");
		shopText.setFocusable(false);
		shopText.setRequestFocusEnabled(false);

		storeLabel.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
		storeLabel.setText(Configuration.LBL_STORE); // NOI18N

		storeLabel1.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
		storeLabel1.setText(Configuration.LBL_SHOP); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jScrollPane1)
								.addGroup(layout.createSequentialGroup()
										.addComponent(mergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 327,
												Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(storeLabel).addComponent(storeLabel1))
								.addGap(0, 0, Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(storeText).addComponent(shopText))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(shopButton, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(storeButton, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap()
						.addComponent(storeLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(storeText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(storeButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(storeLabel1)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(shopText, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(shopButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
						.addGap(4, 4, 4)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(mergeButton).addComponent(progressBar,
										javax.swing.GroupLayout.Alignment.TRAILING,
										javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitButtonActionPerformed
		frame.dispose();
	}// GEN-LAST:event_exitButtonActionPerformed

	private void storeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_storeButtonActionPerformed
		final JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory(new File("."));
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fileChooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			final String fileName = file.getAbsolutePath();
			storeText.setText(fileName);
			storeText.setEnabled(false);
			directories.put(fileName, ".csv");
			outputArea.append(TEXTAREA_LOG_MESSAGE_STORE + fileName + NEW_LINE); // $NON-NLS-1$
																					// //$NON-NLS-2$

		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_storeButtonActionPerformed

	private void shopButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_shopButtonActionPerformed
		final JFileChooser fileChooser = new JFileChooser();
		fileChooser.setCurrentDirectory(new File("."));
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int returnVal = fileChooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			final String fileName = file.getAbsolutePath();
			shopText.setText(fileName);
			directories.put(fileName, ".xlsx");
			shopText.setEnabled(false);
			outputArea.append(TEXTAREA_LOG_MESSAGE_SHOP + fileName + NEW_LINE); // $NON-NLS-1$
																				// //$NON-NLS-2$

		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_shopButtonActionPerformed

	private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_mergeButtonActionPerformed
		final JFileChooser fileChooser = new JFileChooser();
		fileChooser.setSelectedFile(new File("./merged_admin_store_to_shop_2016-06-19.xlsx"));
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int returnVal = fileChooser.showSaveDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fileChooser.getSelectedFile();
			final String fileName = file.getAbsolutePath();
			progressBar.setStringPainted(true);
			merge(directories);
		} else {
			LOGGER.info(CANCEL_FILE_SELECTION);
		}
	}// GEN-LAST:event_mergeButtonActionPerformed

	public void start() {

		try {
			LOGGER.setLevel(Level.SEVERE);
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if (UI_STYLE.equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}

		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| javax.swing.UnsupportedLookAndFeelException ex) {
			LOGGER.log(Level.SEVERE, null, ex);
		}

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				final MainWindow m = new MainWindow();
				final JFrame frame = new JFrame();
				m.setFrame(frame);
				frame.add(m);
				frame.pack();
				frame.setLocationRelativeTo(null);
				frame.setVisible(true);
			}
		});
	}

	public void setFrame(final JFrame frame) {
		this.frame = frame;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton exitButton;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton mergeButton;
	private javax.swing.JTextArea outputArea;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JButton shopButton;
	private javax.swing.JTextField shopText;
	private javax.swing.JButton storeButton;
	private javax.swing.JLabel storeLabel;
	private javax.swing.JLabel storeLabel1;
	private javax.swing.JTextField storeText;
	// End of variables declaration//GEN-END:variables

	public void updateProgress(int percentDone) {
		mergeButton.setEnabled(false);
		progressBar.setValue(progressBar.getValue() + percentDone);
	}

	public void printTask(FileTask fileTask) {
		final String message = "Reading file \"" + fileTask.getFile().toString() + "\" finished";
		outputArea.append(message + "\n");

	}

	private void merge(final Map<String, String> directories) {
		final long start = System.nanoTime();
		System.out.println("Starting...");

		mergeButton.setEnabled(false);
		progressBar.setValue(0);
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		final MainWindow invoker = this;
		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

			@Override
			protected Void doInBackground() throws Exception {

				int progress = 0;
				final TaskDispatcher dipatcher = TaskDispatcher.INSTANCE;
				dipatcher.setDirectories(directories);
				try {
					dipatcher.parseDirectories();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				}
				List<Future<FileTask>> results = dipatcher.execute(invoker);

				setProgress(0);
				int i = 0;
				List<FileTask> finishedTasks = new ArrayList<>();
				for (Future<FileTask> task : results) {
					try {
						final FileTask fileTask = task.get();
						finishedTasks.add(fileTask);
						progress += fileTask.getPercentDone();
						i++;
					} catch (InterruptedException | ExecutionException ex) {
						ex.printStackTrace();
					}

				}
				if (progress < 100) {
					System.out.println("All Tasks " + progress + " Finished");

				}
				dipatcher.mergeFiles(finishedTasks);
				return null;
			}

			@Override
			public void done() {

				mergeButton.setEnabled(true);
				progressBar.setValue(100);
				outputArea.append("Done!\n");
			}

		};
		worker.execute();
		setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		mergeButton.setEnabled(true);
		final long end = System.nanoTime();
		System.out.println("Finished in " + (end - start) / 1000 + " milli(s).");

	}

}
